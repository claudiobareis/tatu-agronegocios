<!-- Logo + Busca -->
<div class="custom-header-main">
    <div class="custom-logo">
        <a href="{{ routes.root_url }}" class="header__heading-link link link--text focus-inset">
            {%- if settings.logo != blank -%}
            <div class="header__heading-logo-wrapper">
                {%- assign logo_alt = settings.logo.alt | default: shop.name | escape -%}
                {%- assign logo_height = settings.logo_width | divided_by: settings.logo.aspect_ratio -%}
                {% capture sizes %}(max-width: {{ settings.logo_width | times: 2 }}px) 50vw, {{ settings.logo_width
                }}px{% endcapture %}
                {% capture widths %}{{ settings.logo_width }}, {{ settings.logo_width | times: 1.5 | round }}, {{
                settings.logo_width | times: 2 }}{% endcapture %}
                {{
                settings.logo
                | image_url: width: 600
                | image_tag:
                class: 'header__heading-logo motion-reduce',
                widths: widths,
                height: logo_height,
                width: settings.logo_width,
                alt: logo_alt,
                sizes: sizes,
                preload: true
                }}
            </div>
            {%- else -%}
            <span class="h2">{{ shop.name }}</span>
            {%- endif -%}
        </a>
    </div>
    <div class="custom-search">
        <form action="{{ routes.search_url }}" method="get" role="search" class="search search-modal__form">
            <div class="field">
                <input class="search__input field__input" id="{{ input_id }}" type="search" name="q"
                    value="{{ search.terms | escape }}" placeholder="{{ 'general.search.search' | t }}" {%- if
                    settings.predictive_search_enabled -%} role="combobox" aria-expanded="false"
                    aria-owns="predictive-search-results" aria-controls="predictive-search-results"
                    aria-haspopup="listbox" aria-autocomplete="list" autocorrect="off" autocomplete="off"
                    autocapitalize="off" spellcheck="false" {%- endif -%}>
                <label class="field__label" for="{{ input_id }}">{{ 'general.search.search' | t }}</label>
                <input type="hidden" name="options[prefix]" value="last">
                <button type="reset" class="reset__button field__button{% if search.terms == blank %} hidden{% endif %}"
                    aria-label="{{ 'general.search.reset' | t }}">
                    <span class="svg-wrapper">
                        {{- 'icon-reset.svg' | inline_asset_content -}}
                    </span>
                </button>
                <button class="search__button field__button" aria-label="{{ 'general.search.search' | t }}">
                    <span class="svg-wrapper">
                        {{- 'icon-search.svg' | inline_asset_content -}}
                    </span>
                </button>
            </div>

            {%- if settings.predictive_search_enabled -%}
            <div class="predictive-search predictive-search--header" tabindex="-1" data-predictive-search>
                {%- render 'loading-spinner', class: 'predictive-search__loading-state' -%}
            </div>

            <span class="predictive-search-status visually-hidden" role="status" aria-hidden="true"></span>
            {%- endif -%}
        </form>

    </div>
    <div class="custom-header-support-item hidden">
        <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd"
                d="M20.1667 8.25C21.1792 8.25 22 9.07081 22 10.0833V13.75C22 14.7625 21.1792 15.5833 20.1667 15.5833V18.3333C20.1667 19.8521 18.9354 21.0833 17.4167 21.0833H16.5C16.5 21.5896 16.0896 22 15.5833 22H13.75C13.2437 22 12.8333 21.5896 12.8333 21.0833V19.25C12.8333 18.7437 13.2437 18.3333 13.75 18.3333H15.5833C16.0896 18.3333 16.5 18.7437 16.5 19.25H17.4167C17.9229 19.25 18.3333 18.8396 18.3333 18.3333V15.5833C17.3208 15.5833 16.5 14.7625 16.5 13.75V10.0833C16.5 9.07081 17.3208 8.25 18.3333 8.25C18.3333 4.70617 15.4605 1.83333 11.9167 1.83333H10.0833C6.53951 1.83333 3.66667 4.70617 3.66667 8.25C4.67919 8.25 5.5 9.07081 5.5 10.0833V13.75C5.5 14.7625 4.67919 15.5833 3.66667 15.5833H1.83333C0.820811 15.5833 0 14.7625 0 13.75V10.0833C0 9.07081 0.820811 8.25 1.83333 8.25C1.83333 3.69365 5.52698 0 10.0833 0H11.9167C16.473 0 20.1667 3.69365 20.1667 8.25Z"
                fill="#8A8D98" />
        </svg>
        <div class="custom-header-support-item-text">
            <span>Atendimento:</span>
            <a href="tel:{{ settings.phone | remove: ' ' }}" class="custom-header-support-item-text-link">{{
                settings.phone }}</a>
        </div>
    </div>
    <div class="custom-header-support-item">
        <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
                d="M18.7049 3.19687C16.6473 1.13437 13.9071 0 10.9951 0C4.98437 0 0.0933036 4.89107 0.0933036 10.9018C0.0933036 12.8219 0.594197 14.6978 1.54688 16.3527L0 22L5.77991 20.4826C7.37098 21.3518 9.16339 21.8085 10.9902 21.8085H10.9951C17.0009 21.8085 22 16.9174 22 10.9067C22 7.99464 20.7625 5.25938 18.7049 3.19687ZM10.9951 19.9719C9.36473 19.9719 7.76875 19.5348 6.37902 18.7098L6.05 18.5134L2.62232 19.4121L3.53571 16.0679L3.31964 15.7241C2.41116 14.2804 1.93482 12.6156 1.93482 10.9018C1.93482 5.90759 6.00089 1.84152 11 1.84152C13.421 1.84152 15.6946 2.78437 17.4036 4.49821C19.1125 6.21205 20.1634 8.48572 20.1585 10.9067C20.1585 15.9058 15.9893 19.9719 10.9951 19.9719ZM15.9647 13.1853C15.6946 13.0478 14.354 12.3897 14.1036 12.3013C13.8531 12.208 13.6714 12.1638 13.4897 12.4388C13.308 12.7138 12.7875 13.3228 12.6254 13.5094C12.4683 13.6911 12.3063 13.7156 12.0362 13.5781C10.4353 12.7777 9.38438 12.1491 8.32857 10.3371C8.04866 9.8558 8.60848 9.89018 9.12902 8.84911C9.21741 8.66741 9.17321 8.51027 9.10446 8.37277C9.03571 8.23527 8.49063 6.89464 8.26473 6.34955C8.04375 5.8192 7.81786 5.89286 7.65089 5.88304C7.49375 5.87322 7.31205 5.87321 7.13036 5.87321C6.94866 5.87321 6.65402 5.94196 6.40357 6.21205C6.15313 6.48705 5.45089 7.14509 5.45089 8.48572C5.45089 9.82634 6.42813 11.1228 6.56071 11.3045C6.69821 11.4862 8.4808 14.2362 11.2161 15.4196C12.9446 16.1661 13.6223 16.2299 14.4866 16.1022C15.0121 16.0237 16.0973 15.4442 16.3232 14.8058C16.5491 14.1674 16.5491 13.6223 16.4804 13.5094C16.4165 13.3866 16.2348 13.3179 15.9647 13.1853Z"
                fill="#8A8D98" />
        </svg>
        <div class="custom-header-support-item-text">
            <span>Atendimento WhatsApp:</span>
            <a href="https://wa.me/{{ settings.whatsapp | remove: ' ' | remove: '(' | remove: ')' | remove: '-' }}"
                class="custom-header-support-item-text-link">{{
                settings.whatsapp }}</a>
        </div>
    </div>

    <div class="custom-header-support-item">
        <svg width="20" height="22" viewBox="0 0 20 22" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd"
                d="M9.95516 1.99104C7.75592 1.99104 5.97308 3.77387 5.97308 5.97311C5.97308 8.17235 7.75592 9.95519 9.95516 9.95519C12.1544 9.95519 13.9372 8.17235 13.9372 5.97311C13.9372 3.77387 12.1544 1.99104 9.95516 1.99104ZM9.95524 0C13.2541 0 15.9284 2.67426 15.9284 5.97312C15.9284 9.27198 13.2541 11.9462 9.95524 11.9462C6.65638 11.9462 3.98213 9.27198 3.98213 5.97312C3.98213 2.67426 6.65638 0 9.95524 0ZM1.99104 21.0045C1.99104 21.5543 1.54533 22 0.995519 22C0.445709 22 0 21.5543 0 21.0045V18.9149C0 16.1658 2.22855 13.9373 4.9776 13.9373H14.9335C17.6825 13.9373 19.9111 16.1658 19.9111 18.9149V21.0045C19.9111 21.5543 19.4654 22 18.9156 22C18.3658 22 17.92 21.5543 17.92 21.0045V18.9149C17.92 17.2654 16.5829 15.9283 14.9335 15.9283H4.9776C3.32817 15.9283 1.99104 17.2654 1.99104 18.9149V21.0045Z"
                fill="#8A8D98" />
        </svg>
        <div class="custom-header-support-item-text">
            <span>Bem-vindo(a)</span>
            {% if customer %}
            <span>Olá, {{ customer.first_name }}!</span>
            {% else %}
            <a href="{%- if customer -%}{{ routes.account_url }}{%- else -%}{{ routes.account_login_url }}{%- endif -%}" class="custom-header-support-item-text-link">Entre ou Cadastre-se</a>
            {% endif %}
        </div>
    </div>
    <div class="custom-header-support-item-cart">
        <button type="button" class="header__icon header__icon--cart link focus-inset" id="cart-icon-bubble" onclick="openCartNotification()">
        {% if cart == empty %}
          <span class="svg-wrapper">{{ 'icon-cart-empty.svg' | inline_asset_content }}</span>
        {% else %}
          <span class="svg-wrapper">{{ 'icon-cart.svg' | inline_asset_content }}</span>
        {% endif %}
        <span class="visually-hidden">{{ 'templates.cart.cart' | t }}</span>
        {%- if cart != empty -%}
          <div class="cart-count-bubble">
            {%- if cart.item_count < 100 -%}
              <span aria-hidden="true">{{ cart.item_count }}</span>
            {%- endif -%}
            <span class="visually-hidden">{{ 'sections.header.cart_count' | t: count: cart.item_count }}</span>
          </div>
        {%- endif -%}
      </button>
    </div>
</div>

<!-- Menu principal -->
<div class="custom-main-menu">
    {%- liquid
    if section.settings.menu != blank
    if section.settings.menu_type_desktop == 'dropdown'
    render 'header-dropdown-menu'
    elsif section.settings.menu_type_desktop != 'drawer'
    render 'header-mega-menu'
    endif
    endif
    %}
</div>

{%- render 'mini-cart' -%}

<script>
async function openCartNotification() {
  const miniCart = document.getElementById('mini-cart');
  if (!miniCart) {
    // Fallback: se não houver mini-cart, vai para a página do carrinho
    window.location.href = '{{ routes.cart_url }}';
    return;
  }

  // Sempre abrir o mini-cart primeiro
  miniCart.style.display = 'block';
  setTimeout(() => miniCart.classList.add('active'), 10);

  try {
    // Buscar dados atuais do carrinho
    console.log('Buscando dados do carrinho...');
    const response = await fetch(`${window.routes.cart_url}?section_id=main-cart-items`);
    const responseText = await response.text();
    console.log('Response recebida, tamanho:', responseText.length);
    console.log('Primeiros 500 chars da response:', responseText.substring(0, 500));
    
    const html = new DOMParser().parseFromString(responseText, 'text/html');
    const cartItems = html.querySelector('.js-contents');
    console.log('Elemento .js-contents encontrado:', !!cartItems);
    
    if (!cartItems) {
      // Se não conseguir carregar, mostrar mensagem de carrinho vazio
      updateMiniCart('<div class="cart__warnings"><p>Não foi possível carregar o carrinho</p></div>');
      return;
    }

    // Verificar se o carrinho está vazio
    const isEmpty = cartItems.querySelector('.cart__warnings') || cartItems.querySelector('.cart__empty-text');
    if (isEmpty) {
      // Mostrar carrinho vazio no mini-cart
      updateMiniCart('<div class="cart__warnings"><p>Carrinho vazio</p></div>');
      return;
    }

    // Atualizar o mini-cart com os dados atuais
    updateMiniCart(cartItems.innerHTML);
    
  } catch (error) {
    console.error('Erro ao carregar dados do carrinho:', error);
    // Mostrar erro no mini-cart em vez de redirecionar
    updateMiniCart('<div class="cart__warnings"><p>Erro ao carregar carrinho</p></div>');
  }
}

function closeMiniCart() {
  const miniCart = document.getElementById('mini-cart');
  if (miniCart) {
    miniCart.classList.remove('active');
    setTimeout(() => miniCart.style.display = 'none', 300);
  }
}

function updateMiniCart(cartContent) {
  const miniCartItems = document.getElementById('mini-cart-items');
  
  // Se cartContent é uma string simples (caso de erro), tratar diretamente
  if (typeof cartContent === 'string' && cartContent.includes('cart__warnings')) {
    console.log('Detectado cart__warnings, mostrando carrinho vazio');
    miniCartItems.innerHTML = `
      <div class="mini-cart__empty">
        <div class="mini-cart__empty-icon">🛒</div>
        <p>Seu carrinho está vazio</p>
      </div>
    `;
    // Atualizar total para zero
    const totalElement = document.getElementById('mini-cart-total');
    if (totalElement) {
      totalElement.textContent = 'R$ 0,00';
    }
    return;
  }
  
  const cartItems = new DOMParser().parseFromString(cartContent, 'text/html');
  
  // Verificar se há avisos de carrinho vazio
  const emptyWarning = cartItems.querySelector('.cart__warnings');
  
  if (emptyWarning) {
    miniCartItems.innerHTML = `
      <div class="mini-cart__empty">
        <div class="mini-cart__empty-icon">🛒</div>
        <p>Seu carrinho está vazio</p>
      </div>
    `;
    // Atualizar total para zero
    const totalElement = document.getElementById('mini-cart-total');
    if (totalElement) {
      totalElement.textContent = 'R$ 0,00';
    }
    return;
  }
  
  const items = cartItems.querySelectorAll('tr.cart-item');
  
  // Debug: verificar quantos itens foram encontrados
  console.log('Número de itens encontrados:', items.length);
  console.log('HTML do carrinho:', cartItems.body ? cartItems.body.innerHTML.substring(0, 1000) : 'sem innerHTML');
  
  if (items.length === 0) {
    miniCartItems.innerHTML = `
      <div class="mini-cart__empty">
        <div class="mini-cart__empty-icon">🛒</div>
        <p>Seu carrinho está vazio ou não foi possível carregar os itens</p>
        <p><small>Debug: Verifique o console para mais detalhes</small></p>
      </div>
    `;
    // Atualizar total para zero
    const totalElement = document.getElementById('mini-cart-total');
    if (totalElement) {
      totalElement.textContent = 'R$ 0,00';
    }
    return;
  }

  let html = '';
  let total = 0;
  
  items.forEach((item, index) => {
    // Extrair imagem
    const imageEl = item.querySelector('.cart-item__image');
    const image = imageEl ? imageEl.src : null;
    const imageAlt = imageEl ? imageEl.alt : '';
    
    // Extrair nome do produto
    const nameEl = item.querySelector('.cart-item__name');
    const name = nameEl ? nameEl.textContent.trim() : '';
    
    // Debug: log apenas se não encontrar dados essenciais
    if (!name) {
      console.log('ERRO: Nome não encontrado. Item HTML:', item.outerHTML.substring(0, 500));
    }
    
    // Extrair variantes/opções
    const options = item.querySelectorAll('.product-option');
    let variantText = '';
    options.forEach(option => {
      const text = option.textContent.trim();
      if (text && !text.includes('R$') && !text.includes('$')) {
        variantText += text + ' ';
      }
    });
    
    // Extrair quantidade primeiro
    const quantityEl = item.querySelector('.quantity__input') || item.querySelector('input[name="updates[]"]');
    const quantity = quantityEl ? parseInt(quantityEl.value) : 1;
    
    // Verificar se há desconto no item
    const discountedPricesEl = item.querySelector('.cart-item__discounted-prices');
    let priceText = '';
    let originalPriceText = '';
    let hasDiscount = false;
    
    if (discountedPricesEl) {
      // Item tem desconto
      hasDiscount = true;
      const originalPriceEl = discountedPricesEl.querySelector('.cart-item__old-price');
      const finalPriceEl = discountedPricesEl.querySelector('.cart-item__final-price');
      
      if (originalPriceEl && finalPriceEl) {
        originalPriceText = originalPriceEl.textContent.trim();
        priceText = finalPriceEl.textContent.trim();
      }
    } else {
      // Item sem desconto - buscar na div .product-option
      const priceEl = item.querySelector('.product-option');
      if (priceEl) {
        priceText = priceEl.textContent.trim();
      }
    }
    
    // Extrair preço total da linha (já calculado pelo Shopify)
    const linePriceEl = item.querySelector('.cart-item__totals .price--end:not(.cart-item__old-price)') || 
                       item.querySelector('.cart-item__totals .cart-item__discounted-prices .price--end:not(.cart-item__old-price)') ||
                       item.querySelector('.cart-item__totals span.price--end') ||
                       item.querySelector('.cart-item__totals .cart-item__discounted-prices dd.price--end');
    
    let itemTotal = 0;
    let linePriceText = '';
    
    if (linePriceEl) {
      linePriceText = linePriceEl.textContent.trim();
      // Extrair valor numérico do preço total da linha (formato brasileiro: R$ 1.600,00)
      const priceMatch = linePriceText.match(/[\d.]+,\d{2}/);
      if (priceMatch) {
        // Converter formato brasileiro para formato americano: 1.600,00 → 1600.00
        const brazilianPrice = priceMatch[0];
        const americanPrice = brazilianPrice.replace(/\./g, '').replace(',', '.');
        itemTotal = parseFloat(americanPrice);
      }
    } else {
      // Fallback: calcular manualmente se não encontrar o preço da linha
      const unitPriceMatch = priceText.match(/[\d.]+,\d{2}/);
      if (unitPriceMatch) {
        const brazilianPrice = unitPriceMatch[0];
        const americanPrice = brazilianPrice.replace(/\./g, '').replace(',', '.');
        const unitPrice = parseFloat(americanPrice);
        itemTotal = unitPrice * quantity;
      }
    }
    
    total += itemTotal;
    
    // Extrair line number para remoção
    const lineNumber = index + 1;
    
    // Debug: verificar dados finais apenas se houver problema
    if (!name || !priceText) {
      console.log('ERRO: Dados incompletos:', { name, priceText, hasDiscount, originalPriceText, quantity, linePriceText });
    }
    
    if (name && priceText) {
      // Construir HTML do preço baseado se há desconto ou não
      let priceHtml = '';
      if (hasDiscount && originalPriceText) {
        priceHtml = `
          <div class="mini-cart-item__price-wrapper">
            <p class="mini-cart-item__price-original"><s>${originalPriceText}</s></p>
            <p class="mini-cart-item__price">${priceText}</p>
          </div>
        `;
      } else {
        priceHtml = `<p class="mini-cart-item__price">${priceText}</p>`;
      }
      
      html += `
        <div class="mini-cart-item" data-line="${lineNumber}">
          ${image ? `<img src="${image}" alt="${imageAlt}" class="mini-cart-item__image">` : ''}
          <div class="mini-cart-item__details">
            <h3 class="mini-cart-item__name">${name}</h3>
            ${variantText ? `<p class="mini-cart-item__variant">${variantText.trim()}</p>` : ''}
            ${priceHtml}
            <p class="mini-cart-item__quantity">Qtd: ${quantity}</p>
            <p class="mini-cart-item__total">Total: ${linePriceText || `R$ ${itemTotal.toFixed(2).replace('.', ',')}`}</p>
          </div>
          <button class="mini-cart-item__remove" onclick="removeCartItem(${lineNumber})" title="Remover item">
            ×
          </button>
        </div>
      `;
    }
  });
  
  miniCartItems.innerHTML = html;
  
  // Atualizar total
  const totalElement = document.getElementById('mini-cart-total');
  if (totalElement) {
    totalElement.textContent = `R$ ${total.toFixed(2).replace('.', ',')}`;
  }
}

async function removeCartItem(lineNumber) {
  try {
    const response = await fetch(`${window.routes.cart_change_url}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({
        line: lineNumber,
        quantity: 0
      })
    });

    if (response.ok) {
      // Recarregar o mini-cart após remoção
      await openCartNotification();
    } else {
      console.error('Erro ao remover item do carrinho');
    }
  } catch (error) {
    console.error('Erro ao remover item:', error);
  }
}
</script>